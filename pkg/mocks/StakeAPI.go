// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/sfoxhq/coinbase-sdk-go/gen/client"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// StakeAPI is an autogenerated mock type for the StakeAPI type
type StakeAPI struct {
	mock.Mock
}

// BroadcastStakingOperation provides a mock function with given fields: ctx, walletId, addressId, stakingOperationId
func (_m *StakeAPI) BroadcastStakingOperation(ctx context.Context, walletId string, addressId string, stakingOperationId string) client.ApiBroadcastStakingOperationRequest {
	ret := _m.Called(ctx, walletId, addressId, stakingOperationId)

	var r0 client.ApiBroadcastStakingOperationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) client.ApiBroadcastStakingOperationRequest); ok {
		r0 = rf(ctx, walletId, addressId, stakingOperationId)
	} else {
		r0 = ret.Get(0).(client.ApiBroadcastStakingOperationRequest)
	}

	return r0
}

// BroadcastStakingOperationExecute provides a mock function with given fields: r
func (_m *StakeAPI) BroadcastStakingOperationExecute(r client.ApiBroadcastStakingOperationRequest) (*client.StakingOperation, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.StakingOperation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiBroadcastStakingOperationRequest) (*client.StakingOperation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiBroadcastStakingOperationRequest) *client.StakingOperation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.StakingOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiBroadcastStakingOperationRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiBroadcastStakingOperationRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BuildStakingOperation provides a mock function with given fields: ctx
func (_m *StakeAPI) BuildStakingOperation(ctx context.Context) client.ApiBuildStakingOperationRequest {
	ret := _m.Called(ctx)

	var r0 client.ApiBuildStakingOperationRequest
	if rf, ok := ret.Get(0).(func(context.Context) client.ApiBuildStakingOperationRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiBuildStakingOperationRequest)
	}

	return r0
}

// BuildStakingOperationExecute provides a mock function with given fields: r
func (_m *StakeAPI) BuildStakingOperationExecute(r client.ApiBuildStakingOperationRequest) (*client.StakingOperation, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.StakingOperation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiBuildStakingOperationRequest) (*client.StakingOperation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiBuildStakingOperationRequest) *client.StakingOperation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.StakingOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiBuildStakingOperationRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiBuildStakingOperationRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateStakingOperation provides a mock function with given fields: ctx, walletId, addressId
func (_m *StakeAPI) CreateStakingOperation(ctx context.Context, walletId string, addressId string) client.ApiCreateStakingOperationRequest {
	ret := _m.Called(ctx, walletId, addressId)

	var r0 client.ApiCreateStakingOperationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) client.ApiCreateStakingOperationRequest); ok {
		r0 = rf(ctx, walletId, addressId)
	} else {
		r0 = ret.Get(0).(client.ApiCreateStakingOperationRequest)
	}

	return r0
}

// CreateStakingOperationExecute provides a mock function with given fields: r
func (_m *StakeAPI) CreateStakingOperationExecute(r client.ApiCreateStakingOperationRequest) (*client.StakingOperation, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.StakingOperation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiCreateStakingOperationRequest) (*client.StakingOperation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiCreateStakingOperationRequest) *client.StakingOperation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.StakingOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiCreateStakingOperationRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiCreateStakingOperationRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchHistoricalStakingBalances provides a mock function with given fields: ctx, networkId, addressId
func (_m *StakeAPI) FetchHistoricalStakingBalances(ctx context.Context, networkId string, addressId string) client.ApiFetchHistoricalStakingBalancesRequest {
	ret := _m.Called(ctx, networkId, addressId)

	var r0 client.ApiFetchHistoricalStakingBalancesRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) client.ApiFetchHistoricalStakingBalancesRequest); ok {
		r0 = rf(ctx, networkId, addressId)
	} else {
		r0 = ret.Get(0).(client.ApiFetchHistoricalStakingBalancesRequest)
	}

	return r0
}

// FetchHistoricalStakingBalancesExecute provides a mock function with given fields: r
func (_m *StakeAPI) FetchHistoricalStakingBalancesExecute(r client.ApiFetchHistoricalStakingBalancesRequest) (*client.FetchHistoricalStakingBalances200Response, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.FetchHistoricalStakingBalances200Response
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiFetchHistoricalStakingBalancesRequest) (*client.FetchHistoricalStakingBalances200Response, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiFetchHistoricalStakingBalancesRequest) *client.FetchHistoricalStakingBalances200Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.FetchHistoricalStakingBalances200Response)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiFetchHistoricalStakingBalancesRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiFetchHistoricalStakingBalancesRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchStakingRewards provides a mock function with given fields: ctx
func (_m *StakeAPI) FetchStakingRewards(ctx context.Context) client.ApiFetchStakingRewardsRequest {
	ret := _m.Called(ctx)

	var r0 client.ApiFetchStakingRewardsRequest
	if rf, ok := ret.Get(0).(func(context.Context) client.ApiFetchStakingRewardsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiFetchStakingRewardsRequest)
	}

	return r0
}

// FetchStakingRewardsExecute provides a mock function with given fields: r
func (_m *StakeAPI) FetchStakingRewardsExecute(r client.ApiFetchStakingRewardsRequest) (*client.FetchStakingRewards200Response, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.FetchStakingRewards200Response
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiFetchStakingRewardsRequest) (*client.FetchStakingRewards200Response, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiFetchStakingRewardsRequest) *client.FetchStakingRewards200Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.FetchStakingRewards200Response)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiFetchStakingRewardsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiFetchStakingRewardsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetExternalStakingOperation provides a mock function with given fields: ctx, networkId, addressId, stakingOperationId
func (_m *StakeAPI) GetExternalStakingOperation(ctx context.Context, networkId string, addressId string, stakingOperationId string) client.ApiGetExternalStakingOperationRequest {
	ret := _m.Called(ctx, networkId, addressId, stakingOperationId)

	var r0 client.ApiGetExternalStakingOperationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) client.ApiGetExternalStakingOperationRequest); ok {
		r0 = rf(ctx, networkId, addressId, stakingOperationId)
	} else {
		r0 = ret.Get(0).(client.ApiGetExternalStakingOperationRequest)
	}

	return r0
}

// GetExternalStakingOperationExecute provides a mock function with given fields: r
func (_m *StakeAPI) GetExternalStakingOperationExecute(r client.ApiGetExternalStakingOperationRequest) (*client.StakingOperation, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.StakingOperation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiGetExternalStakingOperationRequest) (*client.StakingOperation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiGetExternalStakingOperationRequest) *client.StakingOperation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.StakingOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiGetExternalStakingOperationRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiGetExternalStakingOperationRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStakingContext provides a mock function with given fields: ctx
func (_m *StakeAPI) GetStakingContext(ctx context.Context) client.ApiGetStakingContextRequest {
	ret := _m.Called(ctx)

	var r0 client.ApiGetStakingContextRequest
	if rf, ok := ret.Get(0).(func(context.Context) client.ApiGetStakingContextRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetStakingContextRequest)
	}

	return r0
}

// GetStakingContextExecute provides a mock function with given fields: r
func (_m *StakeAPI) GetStakingContextExecute(r client.ApiGetStakingContextRequest) (*client.StakingContext, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.StakingContext
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiGetStakingContextRequest) (*client.StakingContext, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiGetStakingContextRequest) *client.StakingContext); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.StakingContext)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiGetStakingContextRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiGetStakingContextRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStakingOperation provides a mock function with given fields: ctx, walletId, addressId, stakingOperationId
func (_m *StakeAPI) GetStakingOperation(ctx context.Context, walletId string, addressId string, stakingOperationId string) client.ApiGetStakingOperationRequest {
	ret := _m.Called(ctx, walletId, addressId, stakingOperationId)

	var r0 client.ApiGetStakingOperationRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) client.ApiGetStakingOperationRequest); ok {
		r0 = rf(ctx, walletId, addressId, stakingOperationId)
	} else {
		r0 = ret.Get(0).(client.ApiGetStakingOperationRequest)
	}

	return r0
}

// GetStakingOperationExecute provides a mock function with given fields: r
func (_m *StakeAPI) GetStakingOperationExecute(r client.ApiGetStakingOperationRequest) (*client.StakingOperation, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.StakingOperation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiGetStakingOperationRequest) (*client.StakingOperation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiGetStakingOperationRequest) *client.StakingOperation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.StakingOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiGetStakingOperationRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiGetStakingOperationRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewStakeAPI creates a new instance of StakeAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStakeAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *StakeAPI {
	mock := &StakeAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
