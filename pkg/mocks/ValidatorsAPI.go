// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/sfoxhq/coinbase-sdk-go/gen/client"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ValidatorsAPI is an autogenerated mock type for the ValidatorsAPI type
type ValidatorsAPI struct {
	mock.Mock
}

// GetValidator provides a mock function with given fields: ctx, networkId, assetId, validatorId
func (_m *ValidatorsAPI) GetValidator(ctx context.Context, networkId string, assetId string, validatorId string) client.ApiGetValidatorRequest {
	ret := _m.Called(ctx, networkId, assetId, validatorId)

	if len(ret) == 0 {
		panic("no return value specified for GetValidator")
	}

	var r0 client.ApiGetValidatorRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) client.ApiGetValidatorRequest); ok {
		r0 = rf(ctx, networkId, assetId, validatorId)
	} else {
		r0 = ret.Get(0).(client.ApiGetValidatorRequest)
	}

	return r0
}

// GetValidatorExecute provides a mock function with given fields: r
func (_m *ValidatorsAPI) GetValidatorExecute(r client.ApiGetValidatorRequest) (*client.Validator, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorExecute")
	}

	var r0 *client.Validator
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiGetValidatorRequest) (*client.Validator, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiGetValidatorRequest) *client.Validator); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Validator)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiGetValidatorRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiGetValidatorRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListValidators provides a mock function with given fields: ctx, networkId, assetId
func (_m *ValidatorsAPI) ListValidators(ctx context.Context, networkId string, assetId string) client.ApiListValidatorsRequest {
	ret := _m.Called(ctx, networkId, assetId)

	if len(ret) == 0 {
		panic("no return value specified for ListValidators")
	}

	var r0 client.ApiListValidatorsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) client.ApiListValidatorsRequest); ok {
		r0 = rf(ctx, networkId, assetId)
	} else {
		r0 = ret.Get(0).(client.ApiListValidatorsRequest)
	}

	return r0
}

// ListValidatorsExecute provides a mock function with given fields: r
func (_m *ValidatorsAPI) ListValidatorsExecute(r client.ApiListValidatorsRequest) (*client.ValidatorList, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListValidatorsExecute")
	}

	var r0 *client.ValidatorList
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.ApiListValidatorsRequest) (*client.ValidatorList, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.ApiListValidatorsRequest) *client.ValidatorList); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ValidatorList)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ApiListValidatorsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.ApiListValidatorsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewValidatorsAPI creates a new instance of ValidatorsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidatorsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValidatorsAPI {
	mock := &ValidatorsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
